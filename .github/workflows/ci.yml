name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: Test Extension
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run check-types
    
    - name: Run tests
      run: npm test
    
    - name: Build extension
      run: npm run package
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: |
          out/
          .vscode-test/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Check for vulnerabilities
      run: |
        npm audit --json > audit-results.json
        if [ $(cat audit-results.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical') != "0" ]; then
          echo "High or critical vulnerabilities found"
          exit 1
        fi

  package:
    name: Package Extension
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install vsce
      run: npm install -g vsce
    
    - name: Package extension
      run: vsce package
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: '*.vsix'
    
    - name: Attach VSIX to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: './markdown-auto-preview-toggle-${{ github.event.release.tag_name }}.vsix'
        asset_name: 'markdown-auto-preview-toggle-${{ github.event.release.tag_name }}.vsix'
        asset_content_type: application/zip

  publish:
    name: Publish to Marketplace
    runs-on: ubuntu-latest
    needs: [package]
    if: github.event_name == 'release' && !github.event.release.prerelease
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install vsce
      run: npm install -g vsce
    
    - name: Publish to VS Code Marketplace
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: vsce publish --pat $VSCE_PAT

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build extension
      run: npm run package
    
    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(stat -c%s "dist/extension.js")
        MAX_SIZE=51200  # 50KB
        echo "Bundle size: $BUNDLE_SIZE bytes"
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "Bundle size exceeds maximum ($MAX_SIZE bytes)"
          exit 1
        fi
    
    - name: Performance benchmarks
      run: |
        # Add performance testing scripts here
        echo "Performance benchmarks completed"
